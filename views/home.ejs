<!DOCTYPE html>
<html>

<head>
    <title>Tagify Example</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify"></script>
    <script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.polyfills.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.css" rel="stylesheet" type="text/css" />
    <style>
        .customSuggestionsList>div {
            max-height: 300px;
            min-height: 50px;
            border: 2px solid pink;
            overflow: auto;
        }

        .customSuggestionsList .empty {
            color: #999;
            font-size: 20px;
            text-align: center;
            padding: 1em;
        }
    </style>
</head>

<body>
    <h4>type @ and then after name of tag</h4>
    <form action="/tagconverter" method="post">
        <label for="mixedinput">Mixed tags and text with manual suggestions after type @ get list:</label>
        <input name='tagsuggestions' placeholder='write some tags'>
        <button type="submit">Submit</button>
    </form>
    <script>
        var whitelist_1 = [
            { value: "{name}" },
            { value: "{age}" },
            { value: "{gender}" }
        ]
        var input = document.querySelector('input[name=tagsuggestions]'),
            // init Tagify script on the above inputs
            tagify = new Tagify(input, {
                mode: 'mix',
                pattern: /@|#/,
                tagTextProp: 'text',
                whitelist: ["A# .NET", "A# (Axiom)", "A-0 System", "A+", "A++", "ABAP", " deprecated name for CIL", "MSL", "MUMPS", "Mystic Programming L"],
                dropdown: {
                    mixTagsInterpolator: ["{{", "}}"],
                    position: "manual",
                    mapValueTo: 'text',
                    maxItems: Infinity,
                    highlightFirst: true,
                    enabled: 1,
                    classname: "customSuggestionsList",
                    // Render suggestions list manually
                    onCreateList: function (tagify, tagData) {
                        // Render the custom suggestions list and append it to the appendTarget element
                        var customSuggestionsList = document.createElement('ul');
                        customSuggestionsList.classList.add('customSuggestionsList');
                        // Loop through the tagData array and create a new list item for each item
                        tagData.forEach(function (item) {
                            var li = document.createElement('li');
                            li.textContent = item.value;
                            customSuggestionsList.appendChild(li);
                        });
                        tagify.DOM.dropdown.appendChild(customSuggestionsList);
                        // Show the custom suggestions list
                        customSuggestionsList.style.display = 'block';
                        // Attach click event listeners to each list item to add the corresponding tag
                        customSuggestionsList.querySelectorAll('li').forEach(function (li) {
                            li.addEventListener('click', function (e) {
                                var value = e.target.textContent;
                                tagify.addTags(value);
                                tagify.DOM.input.focus();
                                console.log('value', value);
                                // Add the selected tag to the whitelist array
                                tagify.settings.whitelist.push({ value: value });
                                tagify.dropdown.hide.call(tagify);
                            });
                        });
                    },
                },
                callbacks: {
                    add: console.log,  // callback when adding a tag
                    remove: console.log   // callback when removing a tag
                },
                templates: {
                    dropdownItemNoMatch() {
                        return `<div class='empty'>Nothing Found</div>`;
                    }
                },
                enforceWhitelist: false

            })


        // A good place to pull server suggestion list accoring to the prefix/value
        tagify.on('input', function (e) {
            var prefix = e.detail.prefix;

            // first, clean the whitlist array, because the below code, while not, might be async,
            // therefore it should be up to you to decide WHEN to render the suggestions dropdown
            // tagify.settings.whitelist.length = 0;
            if (prefix) {
                if (prefix == '@')
                    tagify.whitelist = whitelist_1;
                console.log('tagify===========', tagify.value)
                if (e.detail.value.length > 1)
                    tagify.dropdown.show(e.detail.value);
            }
            console.log(tagify.value)
            console.log('mix-mode "input" event value: ', e.detail)
        })

        tagify.on('add', function (e) {
            console.log(e)
        })
        tagify.on("dropdown:show", onSuggestionsListUpdate)
            .on("dropdown:hide", onSuggestionsListHide)
            .on('dropdown:scroll', onDropdownScroll)

        renderSuggestionsList()  // defined down below
        // ES2015 argument destructuring
        function onSuggestionsListUpdate({ detail: suggestionsElm }) {
            console.log(suggestionsElm)
        }
        function onSuggestionsListHide() {
            console.log("hide dropdown")
        }
        function onDropdownScroll(e) {
            console.log(e.detail)
        }
        // https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentElement
        function renderSuggestionsList() {
            tagify.dropdown.show() // load the list
            tagify.DOM.scope.parentNode.appendChild(tagify.DOM.dropdown)
        }
    </script>
</body>

</html>