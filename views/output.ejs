<!DOCTYPE html>
<html>

<head>
    <title>Tagify Example</title>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify"></script>
    <script src="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.polyfills.min.js"></script>
    <link href="https://cdn.jsdelivr.net/npm/@yaireo/tagify/dist/tagify.css" rel="stylesheet" type="text/css" />
    <style>
        .customSuggestionsList>div {
            max-height: 300px;
            min-height: 50px;
            border: 2px solid rgb(44, 39, 200);
            overflow: auto;
        }
    </style>
</head>

<body>
    <form action="/tagconverter" method="post">
        <label for="mixedinput">Mixed tags and text </label>
        <input type="text" id="mixedinput" name="mixedinput" />
        <br>
        <button type="submit">Submit</button>
    </form>
    <script>
        fetch('data')
            .then(async (response) => {
                const data = await response.json()
                const keys = Object.keys(data.people[0]); // extract keys from the first object in the array
                var input = document.querySelector('#mixedinput'),
                    tagify = new Tagify(input, { // 635 core settings
                        mode: "mix",   //Use `select` for single-value dropdown-like select box. See `mix` as value to allow mixed-content. The `pattern` setting must be set to some character.
                        pattern: /@|#/,  //Validate input by RegEx pattern (can also be applied on the input itself as an attribute).
                        whitelist: keys,    // An array of allowed tags.
                        dropdown: { //dropdown setting 55
                            position: 'text',  // 'manual' | 'text' | 'input' | 'all';
                            includeSelectedTags: true, //enable tag to write again in tags field.
                            classname: "customSuggestionsList", // Custom class name for the dropdown suggestions list. for css use,
                        },
                    })

                // 1263
                tagify.on('dropdown:show', function (data) {
                    tagify.dropdown.show()
                })

                // The component has received focus.
                tagify.on('focus', function () {
                    tagify.dropdown.show()
                });

                tagify.on('dropdown:select', function (e) {
                    var value = e.detail.data
                    tagify.addMixTags(value);
                    tagify.dropdown.hide()
                });

            })
            .catch(error => console.error(error));
    </script>

</body>

</html>